-- import module: lspconfig

-- declare local var: capabilities

-- define local fun: on_attach
--  * key mapping
--  * key mapping conditional on server capabilities
--     - ff for whole file formatting: lua vim.lsp.buf.formatting()
--     - ff for range formatting: lua vim.lsp.buf.range_formatting()
--  * set autocommands conditional on server_capabilities
--     - resolve document_hightlight

-- -- options for lsp diagnostic
-- vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
--   vim.lsp.diagnostic.on_publish_diagnostics, {
--     -- Enable underline, use default values
--     underline = true,
--     -- Enable virtual text, ovveride spacing to 6
--     virtual_text = {
--       spacing = 6,
--       prefix = '',
--       -- severity_limit = 'Error'  -- Only show virtual text on error
--     },
--     signs = true,
--     update_in_insert = true,
--     -- -- Use a function to dynamically turn signs off
--     -- -- and on, using buffer local variables
--     -- signs =  function(bufnr, client_id)
--     --     return vim.bo[bufnr].show_signs == false
--     -- end,
--     -- -- Disable a feature
--     -- update_in_insert = false,
--   }
-- )
--
-- -- set LSP diagnostic symbols/signs
-- vim.api.nvim_command [[ sign define LspDiagnosticsSignError         text=✗ texthl=LspDiagnosticsSignError       linehl= numhl= ]]
-- vim.api.nvim_command [[ sign define LspDiagnosticsSignWarning       text=⚠ texthl=LspDiagnosticsSignWarning     linehl= numhl= ]]
-- vim.api.nvim_command [[ sign define LspDiagnosticsSignInformation   text= texthl=LspDiagnosticsSignInformation linehl= numhl= ]]
-- vim.api.nvim_command [[ sign define LspDiagnosticsSignHint          text= texthl=LspDiagnosticsSignHint        linehl= numhl= ]]

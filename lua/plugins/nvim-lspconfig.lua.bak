--------------------------------------------------------------------
-- Backup
--------------------------------------------------------------------

-- -- Setup Language Server
-- --------------------------------------------------------------------------
-- local on_attach = require('lsp.on_attach')
-- local capabilities = require('cmp_nvim_lsp').update_capabilities(
--     vim.lsp.protocol.make_client_capabilities()
-- )
-- -- local lsp_servers_path = vim.fn.stdpath('data') .. '/lsp_servers'
-- local lsp_servers_path = RUNTIME_DIR .. '/lsp_servers'
--
-- lsp_installer.on_server_ready(function (server)
--     -- Specify the default options which we'll use for all LSP servers
--     local default_opts = {
--         on_attach = on_attach,
--         capabilities = capabilities,
--     }
--
--     -- Create a server_opts table where we'll specify our custom LSP server configuration
--     local server_opts = {
--         ['sumneko_lua'] = function()
--             local system_name = OS_SYS
--             local lua_root_path = HOME .. '/.local/share/lua-language-server'
--             local lua_binary = lua_root_path .. "/bin/" .. system_name .. "/lua-language-server"
--             -- local lua_root_path = lsp_servers_path .. '/sumneko_lua/extension/server/bin'
--             -- local lua_binary = lua_root_path .. "/lua-language-server"
--
--             local runtime_path = vim.split(package.path, ';')
--             table.insert(runtime_path, 'lua/?.lua')
--             table.insert(runtime_path, 'lua/?/init.lua')
--
--             default_opts.cmd = {
--                 lua_binary,
--                 '-E',
--                 lua_root_path .. '/main.lua',
--             }
--
--             default_opts.settings = {
--                 Lua = {
--                     runtime = {
--                         -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
--                         version = 'LuaJIT',
--                         -- Setup your lua path
--                         path = runtime_path,
--                     },
--                     diagnostics = {
--                         -- Get the language server to recognize the `vim` global
--                         globals = {'vim'},
--                     },
--                     workspace = {
--                         -- Make the server aware of Neovim runtime files
--                         library = vim.api.nvim_get_runtime_file("", true),
--                     },
--                     -- Do not send telemetry data containing a randomized but unique identifier
--                     telemetry = {
--                         enable = false,
--                     },
--                 },
--             }
--
--             default_opts.on_attach = on_attach
--             return default_opts
--         end,
--
--         ['pyright'] = function ()
--             default_opts.cmd = {
--                 lsp_servers_path .. "/python/node_modules/.bin/pyright-langserver",
--                 "--stdio"
--             }
--             default_opts.filetypes = { "python" }
--             default_opts.settings = {
--                 python = {
--                     analysis = {
--                         autoSearchPaths = true,
--                         diagnosticMode = "workspace",
--                         useLibraryCodeForTypes = true,
--                     }
--                 }
--             }
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = capabilities
--             return default_opts
--         end,
--
--         ['tsserver'] = function ()
--             default_opts.cmd = {
--                 lsp_servers_path .. "/tsserver/node_modules/.bin/typescript-language-server",
--                 "--stdio"
--             }
--             default_opts.filetypes = {
--                 'javascript',
--                 'javascriptreact',
--                 'typescript',
--                 'typescriptreact',
--             }
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = capabilities
--             return default_opts
--         end,
--
--         ['html'] = function ()
--             default_opts.cmd = {
--                 lsp_servers_path .. "/html/node_modules/.bin/vscode-html-language-server",
--                 "--stdio"
--             }
--             default_opts.filetypes = {
--                 "html",
--                 "htmldjango",
--             }
--             default_opts.init_options = {
--                 configurationSection = { 'html', 'htmldjango', 'css', 'javascript', },
--                 embeddedLanguages = {
--                     css = true,
--                     javascript = true,
--                 },
--             }
--             default_opts.settings = {}
--             default_opts.single_file_support = true
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = capabilities
--
--             return default_opts
--         end,
--
--         ['cssls'] = function ()
--             default_opts.cmd = {
--                 lsp_servers_path .. "/html/node_modules/.bin/vscode-css-language-server",
--                 "--stdio"
--             }
--             default_opts.filetypes = {
--                 "css",
--                 "scss",
--                 "less",
--             }
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = capabilities
--             return default_opts
--         end,
--
--         ['emmet_ls'] = function ()
--             local emmet_capabilities = vim.lsp.protocol.make_client_capabilities()
--             emmet_capabilities.textDocument.completion.completionItem.snippetSupport = true
--             default_opts.cmd = {
--                 lsp_servers_path .. "/emmet_ls/node_modules/.bin/emmet-ls",
--                 "--stdio"
--             }
--             default_opts.filetypes = {
--                 "html",
--                 "htmldjango",
--                 "blade",
--                 "css",
--             }
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = emmet_capabilities
--             return default_opts
--         end,
--
--         ['diagnosticls'] = function ()
--             default_opts.cmd = {
--                 lsp_servers_path .. "/diagnosticls/node_modules/.bin/diagnostic-languageserver",
--                 "--stdio"
--             }
--             default_opts.filetypes = vim.tbl_keys(filetypes)
--             -- default_opts.root_dir = Vim's starting directory
--             default_opts.init_options = {
--                 filetypes = filetypes,
--                 linters = linters,
--             }
--             default_opts.on_attach = on_attach
--             default_opts.capabilities = capabilities
--             return default_opts
--         end,
--     }
--
--     -- We check to see if any custom server_opts exist for the LSP server, if so, load them,
--     -- if not, use our default_opts
--     server:setup(server_opts[server.name] and server_opts[server.name]() or default_opts)
--     vim.cmd([[
--         " do User LspAttachBuffers
--         let g:completion_trigger_character = [ '.' ]
--     ]])
-- end)

-----------------------------------------------------------
--  DAP init
-----------------------------------------------------------
local dap = safe_require('dap')
if not dap then
    return
end

-----------------------------------------------------------
-- Configure various of DAP Adapter
-----------------------------------------------------------

-- configure dap-python Adapter
-- local python_path = HOME .. '/.pyenv/versions/3.10.0/envs/venv-3.10.0/bin/python'
local venv = os.getenv('VIRTUAL_ENV')
local python_path = vim.fn.getcwd() .. string.format("%s/bin/python",venv)

require('debug.django').setup(python_path)

-- configure python debug adapter
-- require('debug.python').setup(python_path)
dap.adapters.python = {
    type = 'executable',
    command = python_path,
    args = { '-m', 'debugpy.adapter' },
}

-- configure Neovim Lua Adapter
require('debug.lua')

-----------------------------------------------------------
-- Setup UI for Nvim DAP
-----------------------------------------------------------

-- Setup DAP startup window
dap.defaults.fallback.terminal_win_cmd = '10split new'
-- dap.defaults.fallback.terminal_win_cmd = '80vsplit new'

-- Setup Breakpoint Icon
if OS_SYS == 'macOS' then
    -- vim.fn.sign_define('DapBreakpoint', {text='üü•', texthl='', linehl='', numhl=''})
    vim.fn.sign_define('DapBreakpoint', {text='üõë', texthl='', linehl='', numhl=''})
    vim.fn.sign_define('DapBreakpointRejected', {text='üü¶', texthl='', linehl='', numhl=''})
    vim.fn.sign_define('DapStopped', {text='‚≠êÔ∏è', texthl='', linehl='', numhl=''})
elseif OS_SYS == 'Linux' then
    vim.fn.sign_define('DapBreakpoint', {text='‚è±Ô∏è', texthl='', linehl='', numhl=''})
    vim.fn.sign_define('DapBreakpointRejected', {text='üò•', texthl='', linehl='', numhl=''})
    vim.fn.sign_define('DapStopped', {text='‚≠êÔ∏è', texthl='', linehl='', numhl=''})
end

-----------------------------------------------------------
-- Show virtual text for current frame
-----------------------------------------------------------
local dap_virtual_text = safe_require('nvim-dap-virtual-text')
if not dap_virtual_text then
    return
else
    vim.g.dap_virtual_text = true
    dap_virtual_text.setup {
        enabled = true,                     -- enable this plugin (the default)
        enabled_commands = true,            -- create commands DapVirtualTextEnable, DapVirtualTextDisable, DapVirtualTextToggle, (DapVirtualTextForceRefresh for refreshing when debug adapter did not notify its termination)
        highlight_changed_variables = false, -- highlight changed values with NvimDapVirtualTextChanged, else always NvimDapVirtualText
        highlight_new_as_changed = false,   -- highlight new variables in the same way as changed variables (if highlight_changed_variables)
        show_stop_reason = true,            -- show stop reason when stopped for exceptions
        commented = false,                  -- prefix virtual text with comment string
        -- experimental features:
        virt_text_pos = 'eol',              -- position of virtual text, see `:h nvim_buf_set_extmark()`
        all_frames = true,                 -- show virtual text for all stack frames not only current. Only works for debugpy on my machine.
        virt_lines = false,                 -- show virtual lines instead of virtual text (will flicker!)
        virt_text_win_col = nil             -- position the virtual text at a fixed window column (starting from the first text column) ,
                                            -- e.g. 80 to position at column 80, see `:h nvim_buf_set_extmark()`
    }
end

-----------------------------------------------------------
-- provides user interface for nvim-dap
-----------------------------------------------------------
local dap_ui = safe_require('dapui')
if not dap_ui then
    return
else
    dap_ui.setup({
        icons = { expanded = "‚ñæ", collapsed = "‚ñ∏" },
        mappings = {
            -- Use a table to apply multiple mappings
            expand = { "<CR>", "<2-LeftMouse>" },
            open = "o",
            remove = "d",
            edit = "e",
            repl = "r",
        },
        sidebar = {
            -- You can change the order of elements in the sidebar
            elements = {
            -- Provide as ID strings or tables with "id" and "size" keys
            {
                id = "scopes",
                size = 0.25, -- Can be float or integer > 1
            },
            { id = "breakpoints", size = 0.25 },
            { id = "stacks", size = 0.25 },
            { id = "watches", size = 00.25 },
            },
            size = 40,
            position = "left", -- Can be "left", "right", "top", "bottom"
        },
        tray = {
            elements = { "repl" },
            size = 10,
            position = "bottom", -- Can be "left", "right", "top", "bottom"
        },
        floating = {
            max_height = nil, -- These can be integers or a float between 0 and 1.
            max_width = nil, -- Floats will be treated as percentage of your screen.
            border = "single", -- Border style. Can be "single", "double" or "rounded"
            mappings = {
            close = { "q", "<Esc>" },
            },
        },
        windows = { indent = 1 },
    })
end

-----------------------------------------------------------
-- Configuration of DAP Unit Testing Tool: vim-ultest
-----------------------------------------------------------
require('debug.dap-unit-test')

-----------------------------------------------------------
-- Key mapping for nvim-dap
-----------------------------------------------------------
require('debug.dap-keymaps')

-----------------------------------------------------------
-- provides queries of commands supported from nvim-dap
-----------------------------------------------------------
require('telescope').load_extension('dap')
-- require'telescope'.extensions.dap.commands{}
-- require'telescope'.extensions.dap.configurations{}
-- require'telescope'.extensions.dap.list_breakpoints{}
-- require'telescope'.extensions.dap.variables{}
-- require'telescope'.extensions.dap.frames{}

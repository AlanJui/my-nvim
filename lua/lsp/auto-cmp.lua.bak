local cmp_status, cmp = pcall(require, 'cmp')
if not cmp_status then
    return
end

local luasnip_status, luasnip = pcall(require, 'luasnip')
if not luasnip_status then
    return
end

------------------------------------------------------------
-- Add Snippets
------------------------------------------------------------

-- Load your own custom vscode style snippets
require("luasnip.loaders.from_vscode").lazy_load({
	paths = {
		CONFIG_DIR .. "/my-snippets",
		RUNTIME_DIR .. "/site/pack/packer/start/friendly-snippets",
	},
})
-- extends filetypes supported by snippets
luasnip.filetype_extend("vimwik", { "markdown" })
luasnip.filetype_extend("html", { "htmldjango" })

-- -- Require function for tab to work with LUA-SNIP
-- local has_words_before = function()
--     local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--     return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end
--
-- local kind_icons = {
--     Text = "Ôùæ",
--     Method = "m",
--     Function = "Ôûî",
--     Constructor = "Ôê•",
--     Field = "Óúñ",
--     Variable = "Ôö¶",
--     Class = "Ô†ñ",
--     Interface = "ÔÉ®",
--     Module = "Ôíá",
--     Property = "ÔÇ≠",
--     Unit = "Óàü",
--     Value = "Ô¢ü",
--     Enum = "ÔÖù",
--     Keyword = "Ô†ä",
--     Snippet = "ÔÉÑ",
--     Color = "Ô£ó",
--     File = "Ôúò",
--     Reference = "ÔíÅ",
--     Folder = "Ôùä",
--     EnumMember = "ÔÖù",
--     Constant = "Ôõº",
--     Struct = "ÔÜ≥",
--     Event = "ÔÉß",
--     Operator = "Ôöî",
--     TypeParameter = "ÔûÉ",
-- }
-- local select_opts = {behavior = cmp.SelectBehavior.Select}
--
-- cmp.setup({
--     cmpletion = {
--         -- completeopt = "menu, menuone, noinsert",
--         completeopt = "menu, menuone, noselect",
--     },
--     snippet = {
--         -- REQUIRED - you must specify a snippet engine
--         expand = function(args)
--             luasnip.lsp_expand(args.body) -- For `luasnip` users.
--         end,
--     },
--     window = {
--         completion = cmp.config.window.bordered(),
--         documentation = cmp.config.window.bordered(),
--     },
--     mapping = {
--         ['<Up>']   = cmp.mapping.select_prev_item(select_opts),
--         ['<Down>'] = cmp.mapping.select_next_item(select_opts),
--
--         ['<C-p>'] = cmp.mapping.select_prev_item(select_opts),
--         ['<C-n>'] = cmp.mapping.select_next_item(select_opts),
--
--         ['<C-u>'] = cmp.mapping.scroll_docs(-4),
--         ['<C-f>'] = cmp.mapping.scroll_docs(4),
--
--         ['<C-e>'] = cmp.mapping.abort(),
--         ['<CR>'] = cmp.mapping.confirm({select = false}),
--
--         ['<C-m>'] = cmp.mapping.complete(),
--         -- Jump to the next placeholder in the snippet
--         ['<C-d>'] = cmp.mapping(function(fallback)
--             if luasnip.jumpable(1) then
--                 luasnip.jump(1)
--             else
--                 fallback()
--             end
--         end, {'i', 's'}),
--         -- Jump to the previous placeholder in the snippet
--         ['<C-b>'] = cmp.mapping(function(fallback)
--             if luasnip.jumpable(-1) then
--                 luasnip.jump(-1)
--             else
--                 fallback()
--             end
--         end, {'i', 's'}),
--         ["<Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_next_item()
--             elseif luasnip.expand_or_jumpable() then
--                 luasnip.expand_or_jump()
--             elseif has_words_before() then
--                 cmp.complete()
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),
--         ["<S-Tab>"] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_prev_item()
--             elseif luasnip.jumpable(-1) then
--                 luasnip.jump(-1)
--             else
--                 fallback()
--             end
--         end, { "i", "s" }),
--     },
--     sources = {
--         -- Shows available snippets and expands them if they are chosen
--         { name = "luasnip", keyword_length = 2 },
--         -- Shows suggestions based on the response of a language server
--         { name = "nvim_lsp", keyword_length = 3 },
--         { name = "nvim_lua" },
--         -- Autocomplete file paths
--         { name = "path" },
--         { name = "emoji" },
--         { name = "spell" },
--         -- Suggests words found in the current buffer
--         { name = "buffer", keyword_length = 3 },
--     },
--     -- sources = cmp.config.sources({
--     --     { name = "luasnip" },
--     --     { name = "nvim_lsp" },
--     --     { name = "nvim_lua" },
--     --     { name = "path" },
--     --     { name = "emoji" },
--     --     { name = "spell" },
--     -- }, {
--     --     { name = 'buffer' },
--     -- }),
--     formatting = {
--         fields = { "kind", "abbr", "menu" },
--         format = function(entry, vim_item)
--             -- fancy icons and a name of kind
--             vim_item.kind = string.format("%s", kind_icons[vim_item.kind])
--             -- set a name for each source
--             vim_item.menu = ({
--                 nvim_lsp = "[LSP]",
--                 buffer = "[Buff]",
--                 luasnip = "[luasnip]",
--                 nvim_lua = "[Lua]",
--                 latex_symbols = "[Latex]",
--                 spell = "[Spell]",
--                 treesitter = "[TreeSitter]",
--                 zsh = "[Zsh]",
--                 path = "[Path]",
--             })[entry.source.name]
--
--             return vim_item
--         end,
--     },
-- })
--
-- -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
-- cmp.setup.cmdline('/', {
--     mapping = cmp.mapping.preset.cmdline(),
--     sources = {
--         { name = 'buffer' }
--     }
-- })
--
-- -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
-- cmp.setup.cmdline(':', {
--     mapping = cmp.mapping.preset.cmdline(),
--     sources = cmp.config.sources({
--         { name = 'path' }
--     }, {
--         { name = 'cmdline' }
--     })
-- })

------------------------------------------------------------
-- Autocomplete
------------------------------------------------------------
vim.opt.completeopt = {'menu', 'menuone', 'noselect'}

local select_opts = {behavior = cmp.SelectBehavior.Select}

cmp.setup({
  snippet = {
    expand = function(args)
      luasnip.lsp_expand(args.body)
    end
  },
  sources = {
    {name = 'path'},
    {name = 'nvim_lsp', keyword_length = 1},
    {name = 'buffer', keyword_length = 1},
    {name = 'luasnip', keyword_length = 1},
  },
  window = {
    documentation = cmp.config.window.bordered()
  },
  formatting = {
    fields = {'menu', 'abbr', 'kind'},
    format = function(entry, item)
      local menu_icon = {
        nvim_lsp = 'Œª',
        luasnip = '‚ãó',
        buffer = 'Œ©',
        path = 'üñ´',
      }

      item.menu = menu_icon[entry.source.name]
      return item
    end,
  },
  mapping = {
    ['<Up>'] = cmp.mapping.select_prev_item(select_opts),
    ['<Down>'] = cmp.mapping.select_next_item(select_opts),

    ['<C-p>'] = cmp.mapping.select_prev_item(select_opts),
    ['<C-n>'] = cmp.mapping.select_next_item(select_opts),

    ['<C-u>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),

    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({select = false}),

    ['<C-d>'] = cmp.mapping(function(fallback)
      if luasnip.jumpable(1) then
        luasnip.jump(1)
      else
        fallback()
      end
    end, {'i', 's'}),

    ['<C-b>'] = cmp.mapping(function(fallback)
      if luasnip.jumpable(-1) then
        luasnip.jump(-1)
      else
        fallback()
      end
    end, {'i', 's'}),

    ['<Tab>'] = cmp.mapping(function(fallback)
      local col = vim.fn.col('.') - 1

      if cmp.visible() then
        cmp.select_next_item(select_opts)
      elseif col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
        fallback()
      else
        cmp.complete()
      end
    end, {'i', 's'}),

    ['<S-Tab>'] = cmp.mapping(function(fallback)
      if cmp.visible() then
        cmp.select_prev_item(select_opts)
      else
        fallback()
      end
    end, {'i', 's'}),
  },
})
